<?xml version="1.0"?>
<robot name="racecar" xmlns:xacro="http://www.ros.org/wiki/xacro">

<!-- Gazebo references -->

<gazebo reference="chassis">
  <mu1 value="0.0"/>
  <mu2 value="0.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <material>Gazebo/Blue</material>
</gazebo>

<gazebo reference="left_rear_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="1 0 0"/>
  <material>Gazebo/Black</material>
</gazebo>

<gazebo reference="right_rear_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="1 0 0"/>
  <material>Gazebo/Black</material>
</gazebo>

<gazebo reference="left_front_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="0 0 1"/>
  <material>Gazebo/Black</material>
</gazebo>

<gazebo reference="right_front_wheel">
  <mu1 value="1.0"/>
  <mu2 value="1.0"/>
  <kp  value="10000000.0" />
  <kd  value="1.0" />
  <fdir1 value="0 0 1"/>
  <material>Gazebo/Black</material>
</gazebo>

<!-- Gazebo plugins -->

<!-- <gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
    <robotNamespace>/racecar</robotNamespace>
    <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
  </plugin>
</gazebo> -->

<gazebo>
  <plugin name="gazebo_ros_ackermann_drive" filename="libgazebo_ros_ackermann_drive.so">

    <ros>
      <remapping>cmd_vel:=cmd_vel</remapping>
      <remapping>odom:=odom</remapping>
      <remapping>distance:=distance</remapping>
    </ros>

    <update_rate>100.0</update_rate>

    <!-- wheels -->
    <front_left_joint>left_front_wheel_joint</front_left_joint>
    <front_right_joint>right_front_wheel_joint</front_right_joint>
    <rear_left_joint>left_rear_wheel_joint</rear_left_joint>
    <rear_right_joint>right_rear_wheel_joint</rear_right_joint>
    <left_steering_joint>left_steering_hinge_joint</left_steering_joint>
    <right_steering_joint>right_steering_hinge_joint</right_steering_joint>

    <!-- Max absolute steer angle for tyre in radians-->
    <!-- Any cmd_vel angular z greater than this would be capped -->
    <max_steer>0.6458</max_steer>

    <!-- Max absolute steering angle of steering wheel -->
    <max_steering_angle>7.85</max_steering_angle>

    <!-- Max absolute linear speed in m/s -->
    <max_speed>20</max_speed>

    <!-- PID tuning -->
    <left_steering_pid_gain>50.0 5.0 0.1</left_steering_pid_gain>
    <left_steering_i_range>0 0</left_steering_i_range>
    <right_steering_pid_gain>50.0 5.0 0.1</right_steering_pid_gain>
    <right_steering_i_range>0 0</right_steering_i_range>
    <linear_velocity_pid_gain>1 0 0</linear_velocity_pid_gain>
    <linear_velocity_i_range>0 0</linear_velocity_i_range>

    <!-- output -->
    <publish_odom>true</publish_odom>
    <publish_odom_tf>true</publish_odom_tf>
    <publish_wheel_tf>true</publish_wheel_tf>
    <publish_distance>true</publish_distance>

    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_link</robot_base_frame>

  </plugin>
</gazebo>

  <!-- hokuyo -->
<xacro:unless value="$(optenv DISABLE_GAZEBO_LASER false)">
  <gazebo reference="laser">
    <material>Gazebo/Grey</material>
    <sensor type="ray" name="hokuyo_sensor">
      <pose>0 0 0.0124 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1081</samples>
            <resolution>1</resolution>
            <min_angle>-2.3561944902</min_angle>
            <max_angle>2.3561944902</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>laser</frameName>
      </plugin>
    </sensor>
  </gazebo>
</xacro:unless>

<!-- zed camera -->
<xacro:unless value="$(optenv DISABLE_GAZEBO_CAMERA false)">
  <gazebo reference="camera_link">
    <sensor type="camera" name="zed_camera_left_sensor">
      <update_rate>30.0</update_rate>
      <!-- math.atan(320 / 687.8065795898438) * 2 -->
      <camera name="zed_camera_left_camera">
        <horizontal_fov>0.8709216071359963</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>B8G8R8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>/camera/zed</cameraName>
        <imageTopicName>rgb/image_rect_color</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0</hackBaseline><!-- set this to 0.12 for the second camera -->
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
</xacro:unless>

</robot>
